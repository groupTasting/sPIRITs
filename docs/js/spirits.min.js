var radarParameter = ["wacholder", "kraeuter", "zitrus", "frucht", "suesse", "blume", "erde", "schaerfe", "wuerze"];

var tasteParameters = [
 "geschmack/geschmack_wacholder", "geruch/geruch_wacholder",
 "geschmack/geschmack_kraeuter", "geruch/geruch_kraeuter",
 "geschmack/geschmack_zitrus", "geruch/geruch_zitrus",
 "geschmack/geschmack_frucht", "geruch/geruch_frucht",
 "geschmack/geschmack_blume", "geruch/geruch_blume",
 "geschmack/geschmack_wuerze", "geruch/geruch_wuerze",
 "geschmack/geschmack_erde", "geruch/geruch_erde",
 "geschmack/geschmack_suesse", "geruch/geruch_suesse",
 "geschmack/geschmack_schaerfe", "geruch/geruch_schaerfe",
 "bewertung/bewertung_geschmack", "bewertung/bewertung_geruch",
 "aussehen/aussehen_oeligkeit",
//"aussehen/aussehen_farbe":"#ff0044",
];

var jsonDBs = [
  {"url": "https://jsonbox.io/sPIRITsGroupTastingForGin/" },  // https://github.com/vasanthv/jsonbox#readme
  {"url": "https://jsonbase.com/sPIRITsGroupTastingForGin/" }

// https://jsonstorage.net/

];

function getGinDb() {
 return jsonDBs[0].url;
}

var corsProxies = [
  {"url": "https://cors-anywhere.herokuapp.com/", "p": 0.4, "content": null},      // 200 in 60 min 
  {"url": "https://api.allorigins.win/get?url=", "p": 0.6, "content": "contents"}  // goes into contents:
 // NOT WORKING
 // "https://cors-proxy.htmldriven.com/?url=", // 404
 // "https://thingproxy.freeboard.io/fetch/", // ??
 // "http://www.whateverorigin.org/get?url=", // https needed
 // "http://alloworigin.com/get?url=", // https needed
 // "https://yacdn.org/proxy/"  // <uri>?maxAge=10  bad gateway
];

function getRandomProxy() {
  var randomFloat = Math.random();
  var proxy = null
  for (var i = 0; i < corsProxies.length; i++ ) {  
    proxy = corsProxies[i];
    randomFloat -= proxy.p;
    if(randomFloat < 0.0) {
      return proxy.url;
    }
  }
  return proxy.url;
}

var makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
}

var crc32 = function(str) {
    var crcTable = window.crcTable || (window.crcTable = makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < str.length; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};

function getFingerprint() {
  var navigator_info = window.navigator;
  var screen_info = window.screen;
  var uid = navigator_info.mimeTypes.length;
  var dateTs = Math.round(Date.now()/(1000*60*60*24*5));  // 5 days
  uid += navigator_info.userAgent.replace(/\D+/g, '');
  uid += navigator_info.plugins.length;
  uid += screen_info.height || '';
  uid += screen_info.width || '';
  uid += screen_info.pixelDepth || '';
  uid += dateTs.toString();
  return crc32(uid);
}

function findGetParameter(parameterName) {
    var result = null,
        tmp = [];
    var items = location.search.substr(1).split("&");
    for (var index = 0; index < items.length; index++) {
        tmp = items[index].split("=");
        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
    }
    return result;
}

function checkUrlSubString(str) {
  return (location.href.indexOf(str) != -1);
}

function isoStr(str) {
   if (!str) return '';
   str = str.replace(' ','_');
   str = str.replace('ß','ss');
   str = str.replace('ü','ue');
   return str.toLowerCase();
}


function transparentize(color, opacity) {
  var alpha = opacity === undefined ? 0.5 : 1 - opacity;
  return Color(color).alpha(alpha).rgbString();
}

var myCharts = { "geruch": null, "geschmack":null };

function drawChart(ginData, elem, type) {
  var key = "bewertung/bewertung_" + type;   //  "bewertung/bewertung_geschmack"
  var data = ginData.statistic[key];

  var rateClass = "."+type+"RatingAvg";
  $(rateClass).starRating({
  totalStars: 5,
  initialRating: (6.0-data.avg),
  readOnly: true,
  starShape: 'rounded',
  starSize: 30,
  emptyColor: 'lightgray',
  hoverColor: 'salmon',
  activeColor: 'rgb(255, 99, 132)', // 'crimson',
  useGradient: false
  });
  var rateClass = "."+type+"RatingOwn";
  $(rateClass).starRating({
  totalStars: 5,
  initialRating: (6.0-data.own),
  readOnly: true,
  starShape: 'rounded',
  starSize: 30,
  emptyColor: 'lightgray',
  hoverColor: 'salmon',
  activeColor: 'rgb(75, 192, 192)', // 'crimson',
  useGradient: false
  });


  var options = {
        scale: {
            ticks: {
                min: 0.0,
                max: 5.0
            }
        }
    };
  var ownData = [];
  var minData = [];
  var avgData = [];
  var maxData = [];
  for (var index = 0; index < radarParameter.length; index++) {
     var para = radarParameter[index]; 
     var key = type + "/" + type + "_" + para;   //  "geschmack/geschmack_kraeuter"
     var data = ginData.statistic[key];
     ownData.push(data.own);
     avgData.push(data.avg);
     minData.push(data.avg - data.std);
     maxData.push(data.avg + data.std);
  }
  //var chartId = type + "Chart";  // geruchChart or geschmackChart
  //var ctx = document.getElementById(chartId).getContext('2d');
  if(myCharts[type]) {
    myCharts[type].destroy()
  }
  myCharts[type] = new Chart(elem, {
    type: 'radar',
    data: {labels: radarParameter, 
           datasets: [
                      {data: ownData, backgroundColor: transparentize('rgb(75, 192, 192)'), borderColor: 'rgb(75, 192, 192)', 
                       label: 'own', fill: false  },
                      {data: minData, backgroundColor: transparentize('rgb(255, 159, 64)'), borderColor: 'rgb(255, 159, 64)', 
                       label: 'min', fill: '+1' },
                      {data: avgData, backgroundColor: transparentize('rgb(255, 99, 132)'), borderColor: 'rgb(255, 99, 132)', 
                       label: 'avg', fill: false  },
                      {data: maxData, backgroundColor: transparentize('rgb(255, 159, 64)'), borderColor: 'rgb(255, 159, 64)', 
                       label: 'max', fill: '-1'  },

                     ]
          },  
    options: options
  })
}



var vueGin = new Vue({
  el: '#gin', 
  data: {
        initTs: 0.0,
        ginId: '0',
        ginList: [],
        ginInfo: {},
        uid: '0',
        tasteDone: false,
        updInt: null,
        focusInt: null,
        noclickInt: null,
        blurListener: null,
        blurInt: null, 
        allTastes: [], 
        statistics: {}, 
        ginData: {"ts":0.0, "size":0},

  },
  methods: { 
     inqInfo: function() {
       axios
         .get(this.infoUrl)
         .then(response => { 
            this.ginInfo = response.data;
       });
     },
     checkTaste: function () {
       // timeout
       if((Date.now() - this.initTs) > 15*60*1000) { // 900 sec - after 15 minutes stop automatic inquiry.
           clearInterval(this.updInt);
           this.updInt = null;
           clearInterval(this.focusInt);
           this.focusInt = null;
           window.removeEventListener('blur', this.blurListener);
           if(this.noclickInt) {
             clearInterval(this.noclickInt);
           } 
           this.tasteDone = true;
       }
       if(!this.tasteDone) {
         for(var j=0; j<this.ginData.size; j++) {
           var taste = this.ginData.data[j]; 
           if(taste.uid == this.uid) {
             clearInterval(this.focusInt);
             this.focusInt = null;
             window.removeEventListener('blur', this.blurListener);
             if(this.noclickInt) {
               clearInterval(this.noclickInt);
             } 
             this.tasteDone = true;
           } 
         }   
       }
       if(this.tasteDone) {  
         drawChart(this.ginData, this.$refs.geruchChart ,"geruch"); 
         drawChart(this.ginData, this.$refs.geschmackChart, "geschmack");
         this.inqInfo();
       }
     },
     updTaste: function () {
        // first try to get info from database
        if((Date.now() - this.ginData.ts) > 60000) {     // 60 sec
          this.getTaste();             
        }
     },
     getTaste: function () {
       var dbUrl = getGinDb()+"gin"+this.ginId;
       axios
         .get(this.infoUrl)
         .then(response => { 
            this.ginData = response.data[0];
            if((Date.now() - this.ginData.ts) > 300000) {  // 300 sec
              this.inqTaste();
            }  
            this.checkTaste();          
       });
     },
     setTaste: function (json) {
         var result = {};
         for(var i=0; i<tasteParameters.length; i++) {
           var parameter = tasteParameters[i];
           result[parameter]  = {"avg":0.0, "std":0.0, "count":0.0, "own": 0.0};
           for(var j=0; j<json.length; j++) {
             var taste = json[j];
             var rating = parseFloat(taste[parameter]);
             if(rating && rating > 0.0) {
               result[parameter].avg += rating;
               result[parameter].std += rating*rating;
               result[parameter].count += 1.0;
               if(taste.uid == this.uid) {
                 result[parameter].own = rating;
               }
             }
           }  
           if (result[parameter].count > 0.0) {
             result[parameter].avg /= result[parameter].count;
             result[parameter].std /= result[parameter].count;
             result[parameter].std -= Math.pow(result[parameter].avg, 2.0);
             result[parameter].std = Math.sqrt(result[parameter].std);
           }
         }
         this.ginData = {"ginId": this.ginId, "ts": Date.now(), "size": json.length ,"data": json, "statistic": result};  


         var dbDelUrl = getGinDb()+"?q=ginId:"+this.ginId;
         var dbPostUrl = getGinDb()+"gin"+this.ginId;
         var ginData = this.ginData;
         axios
           .delete(dbDelUrl)
           .catch(function (error) {
              console.log(error);
           })
           .then(function () { 
             axios
              .post(dbPostUrl, ginData)
              .catch(function (error) {
                console.log(error);
              });
           }); 
         this.checkTaste();
     },
     // add: call this function if survey in iframe was (potentially) submitted
     inqTaste: function () {
       var proxy = getRandomProxy();
       var url = 'https://kf.kobotoolbox.org/assets/akX5hMZpLEEcQa77RCNabg/submissions.json'
       var query = '{"probe":"'+this.ginId+'"}';
       var koboUrl = proxy + url + '?query='+query;
       axios
         .get(encodeURI(koboUrl))
         .then(response => { 
            var data = response.data;
            if ('contents' in data) { data = JSON.parse(data.contents); }
	    this.setTaste(data);	
       });
     },
     checkSubmit: function () {
       var dbUrl = getGinDb()+"anygin?q=probe:"+this.ginId;
       //var dbDelUrl = getGinDb()+"?q=probe:"+this.ginId;
       axios
         .get(dbUrl)
         .then(response => { 
            if(response.data.length > 0) {
               axios
                .delete(dbUrl)
                .catch(function (error) {
                  console.log(error);
               })
               this.inqTaste();
            }
       });
     },
     blurFrame: function () {
       if (document.activeElement === document.getElementById('kobo')) {
         // clicked
         console.log("iframe clicked");
         if(this.noclickInt) {
           clearInterval(this.noclickInt);
         }
         this.noclickInt = setInterval(this.checkSubmit, 10000);  //no click for 10s: check db 
         //window.removeEventListener('blur', this.blurListener);
         //document.getElementById('kobo').blur();
         //this.blurListener = window.addEventListener('blur', this.blurFrame);
       }
     },

  },
  computed: {
     koboUrl: function () { return 'https://ee.kobotoolbox.org/::XuSX8oba/?&d[probe]='+this.ginId+'&d[uid]='+this.uid },
     imgUrl: function () { return '../../data/gin/img/'+this.ginId+'.jpg'; },
     infoUrl: function () { return '../../data/gin/brands/'+this.ginId+'.json'; },
     amzUrl: function () { return '//ws-eu.amazon-adsystem.com/widgets/q?' +                     	 	'ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=DE'+
	'&source=ac&ref=tf_til&ad_type=product_link' +	
	'&tracking_id=kmicha-21&marketplace=amazon&region=DE'+
	'&placement='+this.amzId+'&asins='+this.amzId+'&linkId='+this.amzLink+
	'&show_border=true&link_opens_in_new_window=true&'+
	'price_color=333333&title_color=0066c0&bg_color=ffffff' ; },
     amzId: function () {return this.ginInfo.asin ? this.ginInfo.asin : '3832183973'; },
     amzLink: function () {return this.ginInfo.alink ? this.ginInfo.alink : '5d72303f43838a3f04761c7edfa37d75'; },
     posGin: function () { return this.ginList.indexOf(this.ginId); },
     nextGin: function () { return ((this.posGin>=0) && this.ginList && ((this.posGin + 1) < this.ginList.length)) ? this.ginList[this.posGin + 1] : null; },
     nextUrl: function () { return this.nextGin ? '?i='+this.nextGin+'&l='+ this.ginList.join(',') : '#' },
     prevGin: function () { return ((this.posGin>=0) && this.ginList && ((this.posGin - 1) >= 0)) ? this.ginList[this.posGin - 1] : null; },
     prevUrl: function () { return this.prevGin ? '?i='+this.prevGin+'&l='+ this.ginList.join(',') : '#' },
  },
  filters: {
    lowercase: function (str) {
      return isoStr(str);
    }
  },
  mounted () { 
        this.initTs = Date.now();
        this.tasteDone = checkUrlSubString("gin/info");
	var tmpGinId = '0'; 
        var tmpList = [];
        var id = findGetParameter("i"); 
        if(id && parseInt(id) && (parseInt(id)>0)) {
	  tmpGinId = id;  
	}
        this.ginId = tmpGinId;	
        var ginlist = findGetParameter("l");
        if(ginlist && (ginlist.split(",").length > 1)) {
          ginlist = ginlist.split(",");
          for (var index = 0; index < ginlist.length; index++) {
             var listid = ginlist[index];
             if(listid && parseInt(listid) && (parseInt(listid)>0)) {
               tmpList.push(listid);
             }
          }
          if(this.ginId == '0') {
             this.ginId = tmpList[0];
          }
        }
        this.ginList = tmpList;
        this.uid = getFingerprint();
        this.inqTaste();
        if(this.tasteDone) {
          this.inqInfo();
        } else {	
          this.updInt = setInterval(this.updTaste, 55000); //ms : 55s
          document.activeElement.blur();
          window.focus();
          this.blurListener = window.addEventListener('blur', this.blurFrame);  //not really working in firefox - may drop totally
          this.focusInt = setInterval(function(){
            document.activeElement.blur();
            window.focus();   
          }, 500);
          this.blurInt = setInterval(this.blurFrame, 450);  // needed for firefox
        }
  }
}) 
