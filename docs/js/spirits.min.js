var tasteParameters = [
 "geschmack/geschmack_wacholder", "geruch/geruch_wacholder",
 "geschmack/geschmack_kraeuter", "geruch/geruch_kraeuter",
 "geschmack/geschmack_zitrus", "geruch/geruch_zitrus",
 "geschmack/geschmack_frucht", "geruch/geruch_frucht",
 "geschmack/geschmack_blume", "geruch/geruch_blume",
 "geschmack/geschmack_wuerze", "geruch/geruch_wuerze",
 "geschmack/geschmack_erde", "geruch/geruch_erde",
 "geschmack/geschmack_suesse", "geruch/geruch_suesse",
 "geschmack/geschmack_schaerfe", "geruch/geruch_schaerfe",
 "bewertung/bewertung_geschmack", "bewertung/bewertung_geruch",
 "aussehen/aussehen_oeligkeit",
//"aussehen/aussehen_farbe":"gelb",
];

var jsonDBs = [
  {"url": "https://jsonbox.io/sPIRITsGroupTastingForGin/" },  // https://github.com/vasanthv/jsonbox#readme
  {"url": "https://jsonbase.com/sPIRITsGroupTastingForGin/" }

// https://jsonstorage.net/

];

function getGinDb() {
 return jsonDBs[0].url;
}

var corsProxies = [
  {"url": "https://cors-anywhere.herokuapp.com/", "p": 0.4, "content": null},      // 200 in 60 min 
  {"url": "https://api.allorigins.win/get?url=", "p": 0.6, "content": "contents"}  // goes into contents:
 // NOT WORKING
 // "https://cors-proxy.htmldriven.com/?url=", // 404
 // "https://thingproxy.freeboard.io/fetch/", // ??
 // "http://www.whateverorigin.org/get?url=", // https needed
 // "http://alloworigin.com/get?url=", // https needed
 // "https://yacdn.org/proxy/"  // <uri>?maxAge=10  bad gateway
];

function getRandomProxy() {
  var randomFloat = Math.random();
  var proxy = null
  for (var i = 0; i < corsProxies.length; i++ ) {  
    proxy = corsProxies[i];
    randomFloat -= proxy.p;
    if(randomFloat < 0.0) {
      return proxy.url;
    }
  }
  return proxy.url;
}

var makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
}

var crc32 = function(str) {
    var crcTable = window.crcTable || (window.crcTable = makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < str.length; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};

function getFingerprint() {
  var navigator_info = window.navigator;
  var screen_info = window.screen;
  var uid = navigator_info.mimeTypes.length;
  var dateTs = Math.round(Date.now()/(1000*60*60*24*5));  // 5 days
  uid += navigator_info.userAgent.replace(/\D+/g, '');
  uid += navigator_info.plugins.length;
  uid += screen_info.height || '';
  uid += screen_info.width || '';
  uid += screen_info.pixelDepth || '';
  uid += dateTs.toString();
  return crc32(uid);
}

function findGetParameter(parameterName) {
    var result = null,
        tmp = [];
    var items = location.search.substr(1).split("&");
    for (var index = 0; index < items.length; index++) {
        tmp = items[index].split("=");
        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
    }
    return result;
}

var vueGin = new Vue({
  el: '#gin',
  data: {
        initTs: 0.0,
        ginId: '0',
        uid: '0',
        tasteDone: false,
        updInt: null,
        blurListener: null,
        allTastes: [], 
        statistics: {}, 
        ginData: {"ts":0.0, "size":0},

  },
  methods: { 
     checkTaste: function () {
       // timeout
       if((Date.now() - this.initTs) > 15*60*1000) { // 900 sec - after 15 minutes  stop automatic inquiry.
           clearInterval(this.updInt);
           this.updInt = null;
           this.tasteDone = true;
       }
       if(!this.tasteDone) {
         for(var j=0; j<this.ginData.size; j++) {
           var taste = this.ginData.data[j]; 
           if(taste.uid == this.uid) {
             this.tasteDone = true;
           } 
         }   
       }
     },
     updTaste: function () {
        // first try to get info from database
        if((Date.now() - this.ginData.ts) > 60000) {     // 60 sec
          this.getTaste();             
        }
     },
     getTaste: function () {
       var dbUrl = getGinDb()+"gin"+this.ginId;
       axios
         .get(dbUrl)
         .then(response => { 
            this.ginData = response.data[0];
            if((Date.now() - this.ginData.ts) > 300000) {  // 300 sec
              this.inqTaste();
            }  
            this.checkTaste();          
       });
     },
     setTaste: function (json) {

         var result = {};
         for(var i=0; i<tasteParameters.length; i++) {
           var parameter = tasteParameters[i];
           result[parameter]  = {"avg":0.0, "std":0.0, "count":0.0};
           for(var j=0; j<json.length; j++) {
             var taste = json[j];
             var rating = parseFloat(taste[parameter]);
             if(rating && rating > 0.0) {
               result[parameter].avg += rating;
               result[parameter].std += rating*rating;
               result[parameter].count += 1.0;
             }
           }  
           if (result[parameter].count > 0.0) {
             result[parameter].avg /= result[parameter].count;
             result[parameter].std /= result[parameter].count;
             result[parameter].std -= Math.pow(result[parameter].avg, 2.0);
             result[parameter].std = Math.sqrt(result[parameter].std);
           }
         }
         this.ginData = {"ginId": this.ginId, "ts": Date.now(), "size": json.length ,"data": json, "statistic": result};  


         var dbDelUrl = getGinDb()+"?q=ginId:"+this.ginId;
         var dbPostUrl = getGinDb()+"gin"+this.ginId;
         var ginData = this.ginData;
         axios
           .delete(dbDelUrl)
           .catch(function (error) {
              console.log(error);
           })
           .then(function () { 
             axios
              .post(dbPostUrl, ginData)
              .catch(function (error) {
                console.log(error);
              });
           }); 
         this.checkTaste();
     },
     // add: call this function if survey in iframe was (potentially) submitted
     inqTaste: function () {
       var proxy = getRandomProxy();
       var url = 'https://kf.kobotoolbox.org/assets/akX5hMZpLEEcQa77RCNabg/submissions.json'
       var query = '{"probe":"'+this.ginId+'"}';
       var koboUrl = proxy + url + '?query='+query;
       axios
         .get(encodeURI(koboUrl))
         .then(response => { 
            var data = response.data;
            if ('contents' in data) { data = JSON.parse(data.contents); }
	    this.setTaste(data);	
       });
     },
     blurFrame: function () {
       if (document.activeElement === document.getElementById('kobo')) {
         // clicked
         console.log("iframe clicked");
         //focus();
         //document.focus();
         window.removeEventListener('blur', this.blurListener);
         document.getElementById('kobo').blur();
         this.blurListener = window.addEventListener('blur', this.blurFrame);
         //document.getElementById('inp').focus();
         //this.focus();
       }
     },
/*
focus();
var listener = window.addEventListener('blur', function() {
    if (document.activeElement === document.getElementById('iframe')) {
        // clicked
    }
    window.removeEventListener('blur', listener);
});
*/


  },
  computed: {
     koboUrl: function () { return 'https://ee.kobotoolbox.org/::XuSX8oba/?&d[probe]='+this.ginId+'&d[uid]='+this.uid },
  },
  mounted () {
        this.initTs = Date.now();
	var tmpGinId = '0'; 
        var id = findGetParameter("i"); 
        if(id) {
	  tmpGinId = id;  
	}
        this.ginId = tmpGinId;	
        this.uid = getFingerprint();
        this.inqTaste();	
        this.updInt = setInterval(this.updTaste, 55000); //ms : 55s
        focus();
        document.getElementById('inp').focus();
        //document.getElementById('kobo').blur();
        this.blurListener = window.addEventListener('blur', this.blurFrame);

  }
}) 
