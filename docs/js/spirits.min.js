var makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
}

var crc32 = function(str) {
    var crcTable = window.crcTable || (window.crcTable = makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < str.length; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};

function getFingerprint() {
  var navigator_info = window.navigator;
  var screen_info = window.screen;
  var uid = navigator_info.mimeTypes.length;
  uid += navigator_info.userAgent.replace(/\D+/g, '');
  uid += navigator_info.plugins.length;
  uid += screen_info.height || '';
  uid += screen_info.width || '';
  uid += screen_info.pixelDepth || '';
  return crc32(uid);
}

function findGetParameter(parameterName) {
    var result = null,
        tmp = [];
    var items = location.search.substr(1).split("&");
    for (var index = 0; index < items.length; index++) {
        tmp = items[index].split("=");
        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
    }
    return result;
}

var vueGinCheck = new Vue({
  el: '#ginCheck',
  data: {
        ginId: '1',
        uid: '0',
        tasteDone: false,
  }, 
  checkStore: function () {
       var storeUrl = 'https://www.jsonstore.io/c6b371c6f7d035fad6c5c3a1c99b7403dfb42102f6be5e97ed8eb4695291ec66/gin/1';
       axios
         .get(storeUrl)
         .then(response => { 
	    this.updateStore(response.data);	
       });
     },
  mounted () {
        this.checkStore();
  }
}) 


var vueGin = new Vue({
  el: '#gin',
  data: {
        ginId: '1',
        uid: '0',
        tasteDone: false,
  },
  methods: { 
     updateTaste: function (json) {
        this.tasteDone = (json.count > 0);
     },
     checkTaste: function (probe, uid) {
       var proxy = 'https://cors-anywhere.herokuapp.com/';
       var url = 'https://kf.kobotoolbox.org/assets/akX5hMZpLEEcQa77RCNabg/submissions.json'
                  // https://kf.kobotoolbox.org/api/v2/assets/akX5hMZpLEEcQa77RCNabg/data.json
       var query = '{"probe":"'+probe+'","uid":"'+uid+'"}';
       var koboUrl = proxy + url + '?query='+query;
       axios
         .get(encodeURI(koboUrl))
         .then(response => { 
	    this.updateTaste(response.data);	
       });
     },
  },
  computed: {
     koboUrl: function () { return 'https://ee.kobotoolbox.org/::XuSX8oba/?&d[probe]='+this.ginId+'&d[uid]='+this.uid },
  },
  mounted () {
	var tmpGinId = '1'; 
        var id = findGetParameter("i"); 
        if(id) {
	  tmpGinId = id;  
	}
        this.ginId = tmpGinId;	
        this.uid = getFingerprint();	
	//this.load(this.year2);
        this.checkTaste(this.ginId, this.uid);
  }
}) 
