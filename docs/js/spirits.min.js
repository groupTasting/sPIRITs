var tasteParameters = [
 "geschmack/geschmack_wacholder", "geruch/geruch_wacholder",
 "geschmack/geschmack_kraeuter", "geruch/geruch_kraeuter",
 "geschmack/geschmack_zitrus", "geruch/geruch_zitrus",
 "geschmack/geschmack_frucht", "geruch/geruch_frucht",
 "geschmack/geschmack_blume", "geruch/geruch_blume",
 "geschmack/geschmack_wuerze", "geruch/geruch_wuerze",
 "geschmack/geschmack_erde", "geruch/geruch_erde",
 "geschmack/geschmack_suesse", "geruch/geruch_suesse",
 "geschmack/geschmack_schaerfe", "geruch/geruch_schaerfe",
 "bewertung/bewertung_geschmack", "bewertung/bewertung_geruch",
 "aussehen/aussehen_oeligkeit",
//"aussehen/aussehen_farbe":"gelb",
];

var makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
}

var crc32 = function(str) {
    var crcTable = window.crcTable || (window.crcTable = makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < str.length; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};

function getFingerprint() {
  var navigator_info = window.navigator;
  var screen_info = window.screen;
  var uid = navigator_info.mimeTypes.length;
  uid += navigator_info.userAgent.replace(/\D+/g, '');
  uid += navigator_info.plugins.length;
  uid += screen_info.height || '';
  uid += screen_info.width || '';
  uid += screen_info.pixelDepth || '';
  return crc32(uid);
}

function findGetParameter(parameterName) {
    var result = null,
        tmp = [];
    var items = location.search.substr(1).split("&");
    for (var index = 0; index < items.length; index++) {
        tmp = items[index].split("=");
        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
    }
    return result;
}

var vueGin = new Vue({
  el: '#gin',
  data: {
        ginId: '1',
        uid: '0',
        tasteDone: false,
        checkInt: null,
        inqInt: null,
        allTastes: [], 
        statistics: {}, 

  },
  methods: { 
     updateTaste: function (json) {
        this.tasteDone = (json && json.length > 0);
        if(this.tasteDone && this.checkInt) {
           clearInterval(this.checkInt);
           this.checkInt = null;
           if(!this.updateInt) {
             this.inqInt = setInterval(this.inqTaste, 10000); //ms
           } 
        }
     },
     checkTaste: function () {
       var proxy = 'https://cors-anywhere.herokuapp.com/';
       var url = 'https://kf.kobotoolbox.org/assets/akX5hMZpLEEcQa77RCNabg/submissions.json'
       var query = '{"probe":"'+this.ginId+'","uid":"'+this.uid+'"}';
       var koboUrl = proxy + url + '?query='+query;
       axios
         .get(encodeURI(koboUrl))
         .then(response => { 
	    this.updateTaste(response.data);	
       });
     },
     setTaste: function (json) {
       this.allTastes = json;
       if(this.statistics.length < this.allTastes.length) {
         var result = {};
         for(var i=0; i<tasteParameters.length; i++) {
           var parameter = tasteParameters[i];
           result[parameter]  = {"avg":0.0, "std":0.0, "count":0.0};
           for(var j=0; j<this.allTastes.length; j++) {
             var taste = this.allTastes[j];
             var rating = parseFloat(taste[parameter]);
             if(rating && rating > 0.0) {
               result[parameter].avg += rating;
               result[parameter].std += rating*rating;
               result[parameter].count += 1.0;
             }
           }  
           if (result[parameter].count > 0.0) {
             result[parameter].avg /= result[parameter].count;
             result[parameter].std /= result[parameter].count;
             result[parameter].std -= Math.pow(result[parameter].avg, 2.0);
             result[parameter].std = Math.sqrt(result[parameter].std);
           }
         }
         this.statistics = result;     
       }
       
     },
     inqTaste: function () {
       var proxy = 'https://cors-anywhere.herokuapp.com/';
       var url = 'https://kf.kobotoolbox.org/assets/akX5hMZpLEEcQa77RCNabg/submissions.json'
       var query = '{"probe":"'+this.ginId+'"}';
       var koboUrl = proxy + url + '?query='+query;
       axios
         .get(encodeURI(koboUrl))
         .then(response => { 
	    this.setTaste(response.data);	
       });
     },
  },
  computed: {
     koboUrl: function () { return 'https://ee.kobotoolbox.org/::XuSX8oba/?&d[probe]='+this.ginId+'&d[uid]='+this.uid },
  },
  mounted () {
	var tmpGinId = '1'; 
        var id = findGetParameter("i"); 
        if(id) {
	  tmpGinId = id;  
	}
        this.ginId = tmpGinId;	
        this.uid = getFingerprint();	
	//this.load(this.year2);
        this.checkTaste(this.ginId, this.uid);
        this.checkInt = setInterval(this.checkTaste, 5000); //ms
        
  }
}) 
